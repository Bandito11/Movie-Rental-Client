/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MovieRentalScreen;

import Custom.MovieSchema;
import Custom.Person;
import clientMenu.Login;
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import static java.lang.Integer.parseInt;
import java.net.URL;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author Bandito
 */
public class MovieScreen extends javax.swing.JFrame {
    
    ArrayList<MovieSchema> moviesList = FillList();
    private int currentMovieId;
    private int customersId;
    
        private ArrayList<MovieSchema> FillList() {
            ArrayList<MovieSchema> movies = new ArrayList<>();
              try{
                  String query = "SELECT Image FROM Movies";
                    ////////////
                   Class.forName("com.mysql.jdbc.Driver");  // MySQL database connection
                   Connection conn = (Connection) DriverManager.getConnection("jdbc:mysql://us-cdbr-azure-east-a.cloudapp.net:3306/movierental?" + "user=b80812adafee28&password=5b6f9d25");     
                   PreparedStatement pst = (PreparedStatement) conn.prepareStatement(query);
                   //////////////////////////////
                   ResultSet rs = pst.executeQuery();


                   while (rs.next()) {
                       MovieSchema p = new MovieSchema();
                        p.setImage(rs.getString("Image"));
                        movies.add(p);
                    }
                   conn.close();
                   return movies;
               }
               catch(ClassNotFoundException | SQLException e){
                   JOptionPane.showMessageDialog(null, "There was some problem with the connection. Please try again!");
                   e.printStackTrace();
               }
              return movies;
}

            @SuppressWarnings("empty-statement")
    public MovieScreen() {
        initComponents(); 
        retrievePictureList();
  
    }
    
    public MovieScreen(Person p){
        initComponents(); 
        retrievePictureList();
        username.setText(p.getUserName());
        setCustomersId(p.getId());
    }

//        JLabel label = (JLabel)c;
//        ImageIcon icon = (ImageIcon)value;
//        label.setIcon(icon);
//        return c;
    
    private void retrievePictureList(){
        Dimension d = new Dimension();
        d.height = 355;
        d.width = 250;
        JLabel label = new JLabel();
        label.setMaximumSize(d);
        label.setMinimumSize(d);
        label.setPreferredSize(d);
        label.setSize(d);
        DefaultListModel model = new DefaultListModel();
//        BufferedImage img = null;
//        BufferedImage dimg = null;
        for(MovieSchema m :moviesList){
//            try {
//                URL image = new URL(m.getImage());
//                img = ImageIO.read(image);
//            } catch (IOException e) {
//                e.printStackTrace();
//            }
//            dimg = (BufferedImage) img.getScaledInstance(label.getWidth(), label.getHeight(),Image.SCALE_SMOOTH);
//            ImageIcon imageIcon = new ImageIcon(dimg);

            try {
                label.setIcon(new ImageIcon(getClass().getResource(m.getImage())));
            } catch (Exception e) {
            }
                

//            label.setIcon(imageIcon);
            model.addElement(label.getIcon());            
        }
        movieList.setModel(model);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        movieList = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        picture = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        title = new javax.swing.JTextField();
        director = new javax.swing.JTextField();
        writers = new javax.swing.JTextField();
        releaseDate = new javax.swing.JTextField();
        runTime = new javax.swing.JTextField();
        rated = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        cast = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        genre = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        genreCombo = new javax.swing.JComboBox();
        username = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(150, 150));

        jButton1.setText("logOut");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        movieList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        movieList.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        movieList.setName(""); // NOI18N
        movieList.setVisibleRowCount(2);
        movieList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                movieListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(movieList);

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        picture.setText("jLabel1");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(picture, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(picture, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel2.setText("Title:");

        title.setEditable(false);

        director.setEditable(false);

        writers.setEditable(false);

        releaseDate.setEditable(false);

        runTime.setEditable(false);

        rated.setEditable(false);

        cast.setEditable(false);
        cast.setColumns(20);
        cast.setRows(5);
        jScrollPane2.setViewportView(cast);

        jLabel3.setText("Director:");

        jLabel4.setText("Writers:");

        jLabel5.setText("Runtime:");

        jLabel6.setText("Release Date:");

        jLabel7.setText("Rated:");

        jLabel8.setText("Cast:");

        jButton2.setText("Hold DVD for pickup");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Hold BLu-Ray for pickup");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setText("Genre:");

        genre.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel6)
                                .addComponent(jLabel4))
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(title)
                            .addComponent(writers)
                            .addComponent(director)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                            .addComponent(runTime)
                            .addComponent(releaseDate)
                            .addComponent(rated)
                            .addComponent(genre))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(45, 45, 45)
                .addComponent(jButton3)
                .addGap(84, 84, 84))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(director, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(writers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(releaseDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rated, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(runTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(genre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel9.setText("Search by Genre:");

        genreCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Action", "Comedy", "Drama", "Sci Fi", "Fantasy", "Foreign", "War", "Adventure", "Family", "Romance", "Musical", "Thriller", "Western", "Documentary", "History", "Animation", "Horror", "Biography", "Mystery", "Crime", "Film Noir" }));
        genreCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genreComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(genreCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(username)
                        .addGap(93, 93, 93)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jLabel9)
                        .addComponent(genreCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(username, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Login l = new Login();
        l.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void movieListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_movieListMouseClicked
        // TODO add your handling code here:
        selectedMovie();
    }//GEN-LAST:event_movieListMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        MovieSchema m = new MovieSchema();
        m.setDvd(true);
        rentMovie();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void genreComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genreComboActionPerformed
        // TODO add your handling code here:
        String genreParams = genreCombo.getSelectedItem().toString();
        try {
            queryMovieList(genreParams);
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(MovieScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_genreComboActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        MovieSchema m = new MovieSchema();
        m.setBluRay(true);
        rentMovie();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void selectedMovie(){
        //TODO:
        String word = movieList.getSelectedValue().toString();
        //JOptionPane.showMessageDialog(null,word.substring(79, word.length()));
        getMovie(word.substring(79, word.length()));
    }
    
    private void getMovie(String image){
          try{
              String query = "select * from movies where image = '"+ image + "'";
                ////////////
               Class.forName("com.mysql.jdbc.Driver");  // MySQL database connection
               Connection conn = (Connection) DriverManager.getConnection("jdbc:mysql://us-cdbr-azure-east-a.cloudapp.net:3306/movierental?" + "user=b80812adafee28&password=5b6f9d25");     
               PreparedStatement pst = (PreparedStatement) conn.prepareStatement(query);
               //////////////////////////////
               ResultSet rs = pst.executeQuery();

               MovieSchema p = new MovieSchema();
               while (rs.next()) {
                    p.setId(parseInt(rs.getString("MoviesID")));
                    p.setTitle(rs.getString("Title"));
                    p.setReleaseDate(rs.getString("ReleaseDate"));
                    p.setGenre(rs.getString("Genre"));
                    p.setRunTime(rs.getString("RunTime"));
                    p.setRated(rs.getString("Rated"));
                    p.setImage(image);
                }
               setCurrentMovieId(p.getId());
               conn.close();
               
               title.setText(p.getTitle());
               releaseDate.setText(p.getReleaseDate());
               genre.setText(p.getGenre());
               runTime.setText(p.getRunTime());
               rated.setText(p.getRated());
              try {
                  picture.setIcon(new ImageIcon(getClass().getResource(image)));
              } catch (Exception e) {
              }
               getWriters(p);
               
           }
           catch(ClassNotFoundException | SQLException e){
               JOptionPane.showMessageDialog(null, "There was some problem with the connection. Please try again!");
               e.printStackTrace();
           }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MovieScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MovieScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MovieScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MovieScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MovieScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea cast;
    private javax.swing.JTextField director;
    private javax.swing.JTextField genre;
    private javax.swing.JComboBox genreCombo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList movieList;
    private javax.swing.JLabel picture;
    private javax.swing.JTextField rated;
    private javax.swing.JTextField releaseDate;
    private javax.swing.JTextField runTime;
    private javax.swing.JTextField title;
    private javax.swing.JLabel username;
    private javax.swing.JTextField writers;
    // End of variables declaration//GEN-END:variables

    private void getWriters(MovieSchema p) throws ClassNotFoundException, SQLException {
              String query = "select * from writers where moviesid = "+ p.getId();
                ////////////
               Class.forName("com.mysql.jdbc.Driver");  // MySQL database connection
               Connection conn = (Connection) DriverManager.getConnection("jdbc:mysql://us-cdbr-azure-east-a.cloudapp.net:3306/movierental?" + "user=b80812adafee28&password=5b6f9d25");     
               PreparedStatement pst = (PreparedStatement) conn.prepareStatement(query);
               //////////////////////////////
               ResultSet rs = pst.executeQuery();
               
               ArrayList <String> writerList = new ArrayList<>();
               while (rs.next()) {
                    p.setWriterFirstName(rs.getString("FirstName"));
                    p.setWriterLastName(rs.getString("LAstName"));
                    writerList.add(p.getWriterFirstName() + " " + p.getWriterLastName());
                }
               //TODO:Writer should be a list
               conn.close();
               writers.setText(writerList.toString());
               getDirectors(p);

    }

    private void getDirectors(MovieSchema p) throws ClassNotFoundException, SQLException {
              String query = "select * from director where moviesid = "+ p.getId();
                ////////////
               Class.forName("com.mysql.jdbc.Driver");  // MySQL database connection
               Connection conn = (Connection) DriverManager.getConnection("jdbc:mysql://us-cdbr-azure-east-a.cloudapp.net:3306/movierental?" + "user=b80812adafee28&password=5b6f9d25");     
               PreparedStatement pst = (PreparedStatement) conn.prepareStatement(query);
               //////////////////////////////
               ResultSet rs = pst.executeQuery();

               ArrayList <String> directorList = new ArrayList<>();
               while (rs.next()) {
                    p.setDirectorFirstName(rs.getString("FirstName"));
                    p.setDirectorLastName(rs.getString("LastName"));
                    directorList.add(p.getDirectorFirstName() + " " + p.getDirectorLastName());
                }
               
               conn.close();
               //TODO:Director should be a list
               director.setText(directorList.toString());
               getCast(p);
    }

    private void getCast(MovieSchema p) throws ClassNotFoundException, SQLException {
              String query = "select * from director where moviesid = "+ p.getId();
                ////////////
               Class.forName("com.mysql.jdbc.Driver");  // MySQL database connection
               Connection conn = (Connection) DriverManager.getConnection("jdbc:mysql://us-cdbr-azure-east-a.cloudapp.net:3306/movierental?" + "user=b80812adafee28&password=5b6f9d25");     
               PreparedStatement pst = (PreparedStatement) conn.prepareStatement(query);
               //////////////////////////////
               ResultSet rs = pst.executeQuery();
               
               ArrayList <String> artistList = new ArrayList<>();
               while (rs.next()) {
                    p.setArtistFirstName(rs.getString("FirstName"));
                    p.setArtistLastName(rs.getString("LastName"));                    
                    artistList.add(p.getArtistFirstName() + " " + p.getArtistLastName());
                }
               //TODO: Artists should be a list
               conn.close();
               cast.setText(artistList.toString());
        
    }

    private void queryMovieList(String genreParams) throws ClassNotFoundException, SQLException {
              String query = "select * from movies where genre = '"+ genreParams +"'";
                ////////////
               Class.forName("com.mysql.jdbc.Driver");  // MySQL database connection
               Connection conn = (Connection) DriverManager.getConnection("jdbc:mysql://us-cdbr-azure-east-a.cloudapp.net:3306/movierental?" + "user=b80812adafee28&password=5b6f9d25");     
               PreparedStatement pst = (PreparedStatement) conn.prepareStatement(query);
               //////////////////////////////
               ResultSet rs = pst.executeQuery();
               
               while (rs.next()) {
                    Dimension d = new Dimension();
                    d.height = 375;
                    d.width = 172;
                    JLabel label = new JLabel();
                    label.setMaximumSize(d);
                    DefaultListModel model = new DefaultListModel();
            //        BufferedImage img = null;
            //        BufferedImage dimg = null;
            //            try {
            //                URL image = new URL(m.getImage());
            //                img = ImageIO.read(image);
            //            } catch (IOException e) {
            //                e.printStackTrace();
            //            }
            //            dimg = (BufferedImage) img.getScaledInstance(label.getWidth(), label.getHeight(),Image.SCALE_SMOOTH);
            //            ImageIcon imageIcon = new ImageIcon(dimg);
                        label.setIcon(new ImageIcon(getClass().getResource(rs.getString("image"))));    
            //            label.setIcon(imageIcon);
                        model.addElement(label.getIcon());            

            movieList.setModel(model);

                }
               //TODO: Artists should be a list
               conn.close();
        
    }

    private void rentMovie() {
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
        Date date = new Date();
        String rentedOn = dateFormat.format(date);
      try{
          String query = "INSERT INTO rentMovie (MoviesId, CustomersId, Rented, RentedOn)" +
            "VALUES (?, ?, ?, ?)";
            ////////////
           Class.forName("com.mysql.jdbc.Driver");  // MySQL database connection
           Connection conn = (Connection) DriverManager.getConnection("jdbc:mysql://us-cdbr-azure-east-a.cloudapp.net:3306/movierental?" + "user=b80812adafee28&password=5b6f9d25");     
           PreparedStatement pst = (PreparedStatement) conn.prepareStatement(query);
           //////////////////////////////
           pst.setInt(1, getCurrentMovieId()); 
           pst.setInt(2, getCustomersId());
           pst.setBoolean(3, true);
           pst.setString(4, rentedOn);
           Calendar cal = Calendar.getInstance();
           cal.add(Calendar.DATE, 2);
           JOptionPane.showMessageDialog(null, title.getText() + " was rented.\nThe price per day is: $2.00 + IVU\n"+
                   "Reservation Date:" + rentedOn + "\nTime for Return: "+ dateFormat.format(cal.getTime()));
           pst.executeUpdate();
           conn.close();
                   
        
       }
       catch(ClassNotFoundException | SQLException e){
           JOptionPane.showMessageDialog(null, "There was some problem with the connection. Please try again!");
           e.printStackTrace();
       }                      
       
    }

    /**
     * @return the currentMovieId
     */
    public int getCurrentMovieId() {
        return currentMovieId;
    }

    /**
     * @param currentMovieId the currentMovieId to set
     */
    public void setCurrentMovieId(int currentMovieId) {
        this.currentMovieId = currentMovieId;
    }

    /**
     * @return the customersId
     */
    public int getCustomersId() {
        return customersId;
    }

    /**
     * @param customersId the customersId to set
     */
    public void setCustomersId(int customersId) {
        this.customersId = customersId;
    }
}
